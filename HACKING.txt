Hacking guide
=============

Reporting bugs
--------------

Report bugs directly to the maintainer.

    Dietrich Epp <depp@zdome.net>

Compiling from Git sources
--------------------------

Check out the sources and run the build script.

    $ git clone --recursive URL repo
    $ cd repo
    $ ./scripts/buildgen.py

This will give you a build system using a Makefile, Xcode project, or
CMake script depending on your platform.

Coding standards
----------------

The code should compile cleanly with warnings turned up.  This is not
yet the case when using MSC, Microsoft's compiler.

Use 4-space tabs everywhere.  Limit 78 characters to a line, except
for code specific to Windows or Mac OS X.  The C coding style is
derived from the Linux coding style.  All global C identifier should
be prefixed with sg_ or SG_, except header guards and definitions in
config.h.

Build system
------------

The build system is a fairly heavy custom Python script.  It uses
lists of source files to generate build scripts for a number of common
build systems.  The build system has a separate "backend" for each
platform as well as a build target for building the products directly.

You can run the build script like this:

    $ ./scripts/buildgen.py

Command line parameters allow you to specify the backend, options, and
environment variables.  For example,

    $ ./scripts/buildgen.py xcode gmake --no-configure \
        PKG_FILENAME=game PKG_URL=http://www.example.com/

On Windows you may need to specify the path to the Git executable:

    $ python scripts/buildgen.py \
        --with-git="C:\Program Files\Git\bin\git.exe"

Linux
-----

The build system on Linux uses GNU Make and GNU Autoconf.  To
initialize the build system, run the build script with the 'gmake'
argument.  The 'gmake' argument is the default action on Linux.  It
generates a makefile and configuration script, then runs the
configuration script with default arguments.

    $ scripts/buildgen.py gmake

After this finishes, run 'make' to build the game.

    $ make -j4

The makefile will usually work even if you do not run the configure
script (with the --no-configure option).  However, it is recommended
to run the configure script anyway.

Mac OS X
--------

The build system on Mac OS X uses Xcode 3.1.

Mac OS X 10.5 or higher is required.  The Core Text API is used for
text rendering, which is only available on 10.5.  A display link is
used for the rendering loop, which requires 10.4 or higher.

Windows
-------

The build system on Windows uses CMake.  You will have to download and
install CMake.  You can use the CMake generator of your choice.

Windows XP or higher is required.

It is recommended that you install the Windows SDK as part of the .NET
4.0 SDK.  This includes the tools and libraries necessary for creating
64-bit applications.  If you only install Microsoft Visual C++, then
you might not have a 64-bit compiler.

Direct build
------------

The build script can also build the game directly.  This is not ideal
for development since there is no support for a partial rebuild, the
entire project is compiled every time.  This mode is intended for
producing release builds, particularly with a CI system such as
Jenkins.

When building directly, additional options and environment variables
are available.

Variables:

    CC          C compiler, defaults vary by platform
    CXX         C++ compiler, defaults vary by platform
    LD          Linker, only on Windows
                (CC or CXX is used on Linux / Mac OS X)

    CFLAGS      C compilation flags
    CXXFLAGS    C++ compilation flags
    CWARN       C warning flags
    CXXWARN     C++ warning flags
    LDFLAGS     Link flags
    LIBS        Additional libraries
    ARCHS       Target architectures

Options:

    --config=CONFIG     use configuration (debug or relase)
    --verbose           print commands as they are run

By default, the release configuration is used.  The binaries are
stripped and the debugging symbols placed in a separate file: the dbg
file for Linux, dSYM for Mac OS X, and pdb for Windows.  The final
build products are placed in the build/product directory.

Linux products:

    name-linux32-gtk
    name-linux32-gtk.dbg
    name-linux32-sdl
    name-linux32-sdl.dbg
    name-linux64-gtk
    name-linux64-gtk.dbg
    name-linux64-sdl
    name-linux64-sdl.dbg

Mac OS X products:

    name.app
    name.app.dSYM

Windows products:

    name.exe
    name.pdb
    name-x64.exe
    name-x64.pdb
