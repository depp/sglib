Hacking guide
=============

Reporting bugs
--------------

Report bugs directly to the maintainer.

    Dietrich Epp <depp@moria.us>

Coding standards
----------------

The code should compile cleanly with warnings turned up.  This is not
yet the case for MSVC.  I have plans to use static analysis tools to
generate additional warnings.

Use 4-space tabs everywhere.  Limit 78 characters to a line, except
for code specific to Windows or Mac OS X.  The C coding style is
derived from the Linux coding style.  All global C identifier should
be prefixed with sg_ or SG_, except header guards and definitions in
config.h.

Linux
-----

Do NOT run 'make install', the Linux version is not designed to be
installed that way.

Requirements:

  * Evdev: a Linux-specific input driver for X.  Most distros have
    used Evdev as the default for a number of years.  If you do not
    use Evdev, keyboard events will be misinterpreted.  Evdev is not
    required for compilation.

  * GtkGLExt: allows OpenGL contexts in Gtk applications.

  * Pango with Cairo support: advanced text layout engine.

  * LibPNG

  * LibJPEG

I am working on making Evdev, Gtk, and Pango optional.

How to compile code from a fresh copy from Git:

    $ autoreconf -i
    $ ./configure --enable-warnings=-Werror \
        CFLAGS='-O0 -g' CXXFLAGS='-O0 -g'
    $ make -j4
    $ make check
    $ ./run.sh

Note that the Autotools version supports "out of tree" builds, i.e.,

    $ mkdir build
    $ cd build
    $ ../configure FLAGS..
    $ make -j4
    $ make check
    $ ./run.sh

The "run.sh" script is generated by the makefile and passes the
appropriate command line flags to the game.  These command line flags
specify the location of the game's data files.

Mac OS X
--------

Requirements:

  * Mac OS X 10.5 or higher.  The Core Text API is used for text
    rendering, which is only available on 10.5.  A display link is
    used for the rendering loop, which requires 10.4 or higher.

  * Xcode 3 or higher.

When running the game, you will ned to specify the command line flags
for locating the data files.  I am working on baking the correct flags
into the Xcode project.  Add the following default command line flags
to the executable:

    -path.data-path
    $(PROJECT_DIR)/data

Only the Release build is suitable for distribution.  The Debug build
is not Universal.

Windows
-------

Requirements:

  * Windows Vista or higher.  The Windows Imaging Component (wincodec)
    is used for texture loading, and it appears to only work on Vista
    or higher.

  * Microsoft Visual Studio Express 2010 is used for the project.  I
    expect recent commercial versions will also work.

When running the game, you will need to specify command line flags for
locating the data files.  I am working on baking the correct flags
into the MSVC project.  Add the following command line flags to the
MSVC project:

    /I"$(ProjectDir)data"

Only the Release build is suitable for distribution; it uses a static
runtime library.
