# Copyright 2014 Dietrich Epp.
# This file is part of SGLib.  SGLib is licensed under the terms of the
# 2-clause BSD license.  For more information, see LICENSE.txt.
import os
import io

NOTICE = 'This file automatically generated by the build system'

class GeneratedSource(object):
    __slots__ = []

    @property
    def _binary(self):
        return False

    @property
    def is_regenerated_always(self):
        return False

    @property
    def is_regenerated_only(self):
        return False

    @property
    def dependencies(self):
        return ()

    @property
    def target(self):
        raise NotImplementedError('must be implemented by subclass')

    def regen(self):
        """Regenerate the file."""
        if self._binary:
            fp = io.BytesIO()
            self.write(fp)
            value = fp.getvalue()
        else:
            fp = io.StringIO()
            self.write(fp)
            value = fp.getvalue().encode('UTF-8')

        if self.is_regenerated_always:
            try:
                with open(self.target, 'rb') as fp:
                    oldvalue = fp.read()
            except FileNotFoundError:
                pass
            else:
                if oldvalue == value:
                    return

        try:
            with open(self.target + '.tmp', 'wb') as fp:
                fp.write(value)
            os.rename(self.target + '.tmp', self.target)
        except:
            try:
                os.remove(self.target + '.tmp')
            except FileNotFoundError:
                pass
            raise
