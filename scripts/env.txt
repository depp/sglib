Environments
============

The concept of an "environment" is central to the build system.

An environment is essentially just a dictionary of variable names (CC,
CFLAGS, etc.) and values.  The Environment class itself has extra code
to ensure to check that the names and values of these variables are
somewhat correct, but otherwise it's just a fancy dictionary.

Each object built by the system uses settings from the environment to
control how it is built.  Since different parts need to be built in
different ways, there is not a single environment, but a collection of
environments.  Each object is built using a combination of different
environments.

There are two ways environments can be combined:

1. Variables from one environment can replace variables in another
environment.  This is achieved with the 'override' method.

    env = Environment(CFLAGS='-O2', CC='gcc')
    env2 = Environment(CFLAGS='-O0', CXX='g++')
    env.override(env2)
    # env now has CFLAGS=-O0, CC=gcc, CXX=g++

2. Variables from both environments can be combined.  The resulting
values will be a combination of the values from both environments,
combined in a way that depends on the variable.

    env1 = Environment(CFLAGS='-O0', CC='gcc', CXX='g++')
    env2 = Environment(
        CFLAGS='-arch i386', CC='clang', CXX='clang++')
    env3 = Environment(env1, env2)
    # env3 has CFLAGS='-O0 -arch i386', CC=clang, CXX=clang++

There are three standard environment layers which are typically
combined to produce an environment for building a file.  Each layer
takes precedence over the previous layers.

1. The project environment contains all settings global to the project
(or target) which do not depend on the platform.  For example, this
environment contains the executable name, author, and the version
number of the project.  This layer will be the same across a build.

2. The platform environment contains settings that are specific to the
platform, but should not be overriden by the user.  For example, this
environment contains flags to link with necessary libraries.  This
layer will also vary across a build.  For example, certain flags might
be necessary for building certain files.

3. The user environment contains default settings that can be directly
overridden by the user.  For example, this environment contains the C
compiler flags.  These are also platform-specific flags.

Because of the order in which the environments are combined, platform
flags will always appear before user flags.  This allows user flags to
override platform flags, but still allows the platform flags to vary
as different parts of the project are built.

Configuration variables
-----------------------

Configuration variables affect general parameters of the build.

    VERBOSE: whether command lines are printed out in full
    CONFIG: either 'debug' or 'release'

Program variables
-----------------

Program variables are environment variables that locate a particular
program, e.g., a compiler.  When two values of a program variable are
combined, the later one takes precedence.  If a program variable is
specified as a list, then the Environment class will search the PATH
for each executable in the list and choose the first one that it
finds.

    CC: C compiler
    CXX: C++ compiler
    LD: Linker (Windows only, ignored on Linux / Mac OS X)
    GIT: path to Git executable

Flag variables
--------------

Flag variables specify a list of command line options to a particular
program.  When two values of a flag variable are combined, the two
lists are concatenated.  If a flag variable is specified as a single
string, then the string is split on whitespace.

    CPPFLAGS: C preprocessor flags, passed to both C and C++ compilers
    CPPATH: paths for searching headers
    CFLAGS: C compiler flags
    CXXFLAGS: C++ compiler flags
    CWARN: C warning flags
    CXXWARN: C++ warning flags
    LDFLAGS: linker flags
    LIBS: libraries
    ARCHS: target architectures (Mac OS X)

LDFLAGS and LIBS both specify flags for the linker, but they get
passed at different positions in the command line.  LDFLAGS goes at
the very beginning and LIBS goes at the end.  This is most important
when targeting GNU Binutils (Linux), since certain flags only affect
what comes afterwards on the command line, and libraries are searched
in order.

For example, '-Wl,--gc-sections' must go in LDFLAGS and '-lpng' must
go in LIBS.

Project variables
-----------------

Project variables combine by overriding the previous value.  They are
typically only specified in the project build script, but they can be
overridden by the user if necessary.

Project variables are special in that many of them will take default
values which are generated from the values of other variables.

    PKG_NAME: Human-readable package name (spaces are okay).  Used in
    automatically generated documentation.

    PKG_IDENT: Reverse domain name for identifying the package,
    necessary on Mac OS X to identify preferences.

    PKG_FILENAME: File name to use for archives.  This defaults to the
    package name, with special characters and spaces stripped.

    PKG_URL: Website URL for the project.

    PKG_EMAIL: Maintainer email address.

    PKG_COPYRIGHT: Copyright notice for the project.  Should include a
    copyright symbol, which can be specified as \xa9 in a Python
    Unicode string.

    PKG_APPLE_CATEGORY: Apple application category.

    EXE_NAME: Executable name, defaults to PKG_NAME.

    EXE_MAC: Executable name on Mac OS X, defaults to EXE_NAME.

    EXE_LINUX: Executable name on Linux, defaults to EXE_NAME with
    special characters and spaces stripped.

    EXE_WINDOWS: Executable name on Windows, defaults to EXE_NAME.

    EXE_MACICON: Path to the Mac OS X icon file.

Examples:

    PKG_NAME:       My Game
    PKG_IDENT:	    com.example.my-game
    PKG_FILENAME:   my_game
    PKG_URL:	    http://www.example.com/my-game/
    PKG_EMAIL:	    developer@example.com
    PKG_COPYRIGHT:  Copyright Â© 2012 Some Person

    PKG_APPLE_CATEGORY: public.app-category.puzzle-games

    EXE_NAME:       My Game
    EXE_LINUX	    my-game
    EXE_MACICON	    resources/Icon.icns
