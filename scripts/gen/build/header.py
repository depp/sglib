import gen.project as project
import re
from io import StringIO

NON_ALPHANUM = re.compile('[^A-Za-z0-9]+')
def make_ident(x):
    return NON_ALPHANUM.sub('_', x)

def dump_defs(fp, prefix, defs, all_defs):
    for d in sorted(all_defs):
        ident = make_ident(prefix + d).upper()
        if d in defs:
            fp.write('#define {} 1\n'.format(ident))
        else:
            fp.write('#undef  {}\n'.format(ident))

def gen_header(config):
    all_features = set()
    all_alts = set()
    bcfg = config.get_config(config.native_os)
    for c in bcfg.config.project.configs():
        if isinstance(c, project.Feature):
            all_features.add(c.flagid)
        elif isinstance(c, project.Alternative):
            all_alts.add(c.flagid)

    fp = StringIO()
    fp.write(
        '/* This file automatically generated by the build system */\n'
        '#ifndef CONFIG_H\n'
        '#define CONFIG_H\n'
        '\n'
        '/* Features */\n'
        '\n')
    dump_defs(fp, 'enable_', bcfg.enabled, all_features)
    fp.write(
        '\n'
        '/* Alternatives */\n'
        '\n')
    dump_defs(fp, 'use_', bcfg.enabled, all_alts)
    fp.write('\n'
             '#endif\n')
    text = fp.getvalue()

    path = config.actions['header'][0]
    with open(path.native, 'w') as fp:
        fp.write(text)
